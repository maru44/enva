// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/maru44/enva/service/api/pkg/domain (interfaces: IKvInteractor,ICliKvInteractor,IOrgInteractor,IProjectInteractor,ISmtpInteractor,IUserInteractor)

// Package mockdomain is a generated GoMock package.
package mockdomain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/maru44/enva/service/api/pkg/domain"
)

// MockIKvInteractor is a mock of IKvInteractor interface.
type MockIKvInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockIKvInteractorMockRecorder
}

// MockIKvInteractorMockRecorder is the mock recorder for MockIKvInteractor.
type MockIKvInteractorMockRecorder struct {
	mock *MockIKvInteractor
}

// NewMockIKvInteractor creates a new mock instance.
func NewMockIKvInteractor(ctrl *gomock.Controller) *MockIKvInteractor {
	mock := &MockIKvInteractor{ctrl: ctrl}
	mock.recorder = &MockIKvInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKvInteractor) EXPECT() *MockIKvInteractorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIKvInteractor) Create(arg0 context.Context, arg1 domain.KvInputWithProjectID) (*domain.KvID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*domain.KvID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIKvInteractorMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIKvInteractor)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIKvInteractor) Delete(arg0 context.Context, arg1 domain.KvID, arg2 domain.ProjectID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIKvInteractorMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIKvInteractor)(nil).Delete), arg0, arg1, arg2)
}

// DeleteByKey mocks base method.
func (m *MockIKvInteractor) DeleteByKey(arg0 context.Context, arg1 domain.KvKey, arg2 domain.ProjectID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByKey indicates an expected call of DeleteByKey.
func (mr *MockIKvInteractorMockRecorder) DeleteByKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByKey", reflect.TypeOf((*MockIKvInteractor)(nil).DeleteByKey), arg0, arg1, arg2)
}

// DetailValid mocks base method.
func (m *MockIKvInteractor) DetailValid(arg0 context.Context, arg1 domain.KvKey, arg2 domain.ProjectID) (*domain.Kv, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailValid", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Kv)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetailValid indicates an expected call of DetailValid.
func (mr *MockIKvInteractorMockRecorder) DetailValid(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailValid", reflect.TypeOf((*MockIKvInteractor)(nil).DetailValid), arg0, arg1, arg2)
}

// ListValid mocks base method.
func (m *MockIKvInteractor) ListValid(arg0 context.Context, arg1 domain.ProjectID) ([]domain.Kv, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListValid", arg0, arg1)
	ret0, _ := ret[0].([]domain.Kv)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListValid indicates an expected call of ListValid.
func (mr *MockIKvInteractorMockRecorder) ListValid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListValid", reflect.TypeOf((*MockIKvInteractor)(nil).ListValid), arg0, arg1)
}

// Update mocks base method.
func (m *MockIKvInteractor) Update(arg0 context.Context, arg1 domain.KvInputWithProjectID) (*domain.KvID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*domain.KvID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIKvInteractorMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIKvInteractor)(nil).Update), arg0, arg1)
}

// MockICliKvInteractor is a mock of ICliKvInteractor interface.
type MockICliKvInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockICliKvInteractorMockRecorder
}

// MockICliKvInteractorMockRecorder is the mock recorder for MockICliKvInteractor.
type MockICliKvInteractorMockRecorder struct {
	mock *MockICliKvInteractor
}

// NewMockICliKvInteractor creates a new mock instance.
func NewMockICliKvInteractor(ctrl *gomock.Controller) *MockICliKvInteractor {
	mock := &MockICliKvInteractor{ctrl: ctrl}
	mock.recorder = &MockICliKvInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICliKvInteractor) EXPECT() *MockICliKvInteractorMockRecorder {
	return m.recorder
}

// BulkInsert mocks base method.
func (m *MockICliKvInteractor) BulkInsert(arg0 context.Context, arg1 domain.ProjectID, arg2 []domain.KvInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsert", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkInsert indicates an expected call of BulkInsert.
func (mr *MockICliKvInteractorMockRecorder) BulkInsert(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsert", reflect.TypeOf((*MockICliKvInteractor)(nil).BulkInsert), arg0, arg1, arg2)
}

// MockIOrgInteractor is a mock of IOrgInteractor interface.
type MockIOrgInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockIOrgInteractorMockRecorder
}

// MockIOrgInteractorMockRecorder is the mock recorder for MockIOrgInteractor.
type MockIOrgInteractorMockRecorder struct {
	mock *MockIOrgInteractor
}

// NewMockIOrgInteractor creates a new mock instance.
func NewMockIOrgInteractor(ctrl *gomock.Controller) *MockIOrgInteractor {
	mock := &MockIOrgInteractor{ctrl: ctrl}
	mock.recorder = &MockIOrgInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrgInteractor) EXPECT() *MockIOrgInteractorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIOrgInteractor) Create(arg0 context.Context, arg1 domain.OrgInput) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIOrgInteractorMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIOrgInteractor)(nil).Create), arg0, arg1)
}

// DetailBySlug mocks base method.
func (m *MockIOrgInteractor) DetailBySlug(arg0 context.Context, arg1 string) (*domain.Org, *domain.UserType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailBySlug", arg0, arg1)
	ret0, _ := ret[0].(*domain.Org)
	ret1, _ := ret[1].(*domain.UserType)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DetailBySlug indicates an expected call of DetailBySlug.
func (mr *MockIOrgInteractorMockRecorder) DetailBySlug(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailBySlug", reflect.TypeOf((*MockIOrgInteractor)(nil).DetailBySlug), arg0, arg1)
}

// InvitationDeny mocks base method.
func (m *MockIOrgInteractor) InvitationDeny(arg0 context.Context, arg1 domain.OrgInvitationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvitationDeny", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvitationDeny indicates an expected call of InvitationDeny.
func (mr *MockIOrgInteractorMockRecorder) InvitationDeny(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvitationDeny", reflect.TypeOf((*MockIOrgInteractor)(nil).InvitationDeny), arg0, arg1)
}

// InvitationDetail mocks base method.
func (m *MockIOrgInteractor) InvitationDetail(arg0 context.Context, arg1 domain.OrgInvitationID) (*domain.OrgInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvitationDetail", arg0, arg1)
	ret0, _ := ret[0].(*domain.OrgInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvitationDetail indicates an expected call of InvitationDetail.
func (mr *MockIOrgInteractorMockRecorder) InvitationDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvitationDetail", reflect.TypeOf((*MockIOrgInteractor)(nil).InvitationDetail), arg0, arg1)
}

// InvitationList mocks base method.
func (m *MockIOrgInteractor) InvitationList(arg0 context.Context) ([]domain.OrgInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvitationList", arg0)
	ret0, _ := ret[0].([]domain.OrgInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvitationList indicates an expected call of InvitationList.
func (mr *MockIOrgInteractorMockRecorder) InvitationList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvitationList", reflect.TypeOf((*MockIOrgInteractor)(nil).InvitationList), arg0)
}

// InvitationListFromOrg mocks base method.
func (m *MockIOrgInteractor) InvitationListFromOrg(arg0 context.Context, arg1 domain.OrgID) ([]domain.OrgInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvitationListFromOrg", arg0, arg1)
	ret0, _ := ret[0].([]domain.OrgInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvitationListFromOrg indicates an expected call of InvitationListFromOrg.
func (mr *MockIOrgInteractorMockRecorder) InvitationListFromOrg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvitationListFromOrg", reflect.TypeOf((*MockIOrgInteractor)(nil).InvitationListFromOrg), arg0, arg1)
}

// InvitationPastList mocks base method.
func (m *MockIOrgInteractor) InvitationPastList(arg0 context.Context, arg1 domain.OrgID) ([]domain.OrgInvitationID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvitationPastList", arg0, arg1)
	ret0, _ := ret[0].([]domain.OrgInvitationID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvitationPastList indicates an expected call of InvitationPastList.
func (mr *MockIOrgInteractorMockRecorder) InvitationPastList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvitationPastList", reflect.TypeOf((*MockIOrgInteractor)(nil).InvitationPastList), arg0, arg1)
}

// InvitationUpdateStatus mocks base method.
func (m *MockIOrgInteractor) InvitationUpdateStatus(arg0 context.Context, arg1 domain.OrgInvitationID, arg2 domain.OrgInvitationStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvitationUpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvitationUpdateStatus indicates an expected call of InvitationUpdateStatus.
func (mr *MockIOrgInteractorMockRecorder) InvitationUpdateStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvitationUpdateStatus", reflect.TypeOf((*MockIOrgInteractor)(nil).InvitationUpdateStatus), arg0, arg1, arg2)
}

// Invite mocks base method.
func (m *MockIOrgInteractor) Invite(arg0 context.Context, arg1 domain.OrgInvitationInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invite", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invite indicates an expected call of Invite.
func (mr *MockIOrgInteractorMockRecorder) Invite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invite", reflect.TypeOf((*MockIOrgInteractor)(nil).Invite), arg0, arg1)
}

// List mocks base method.
func (m *MockIOrgInteractor) List(arg0 context.Context) ([]domain.Org, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]domain.Org)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIOrgInteractorMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIOrgInteractor)(nil).List), arg0)
}

// ListOwnerAdmin mocks base method.
func (m *MockIOrgInteractor) ListOwnerAdmin(arg0 context.Context) ([]domain.Org, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOwnerAdmin", arg0)
	ret0, _ := ret[0].([]domain.Org)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOwnerAdmin indicates an expected call of ListOwnerAdmin.
func (mr *MockIOrgInteractorMockRecorder) ListOwnerAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOwnerAdmin", reflect.TypeOf((*MockIOrgInteractor)(nil).ListOwnerAdmin), arg0)
}

// MemberCreate mocks base method.
func (m *MockIOrgInteractor) MemberCreate(arg0 context.Context, arg1 domain.OrgMemberInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MemberCreate indicates an expected call of MemberCreate.
func (mr *MockIOrgInteractorMockRecorder) MemberCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberCreate", reflect.TypeOf((*MockIOrgInteractor)(nil).MemberCreate), arg0, arg1)
}

// MemberDelete mocks base method.
func (m *MockIOrgInteractor) MemberDelete(arg0 context.Context, arg1 domain.UserID, arg2 domain.OrgID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberDelete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MemberDelete indicates an expected call of MemberDelete.
func (mr *MockIOrgInteractorMockRecorder) MemberDelete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberDelete", reflect.TypeOf((*MockIOrgInteractor)(nil).MemberDelete), arg0, arg1, arg2)
}

// MemberGetCurrentUserType mocks base method.
func (m *MockIOrgInteractor) MemberGetCurrentUserType(arg0 context.Context, arg1 domain.OrgID) (*domain.UserType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberGetCurrentUserType", arg0, arg1)
	ret0, _ := ret[0].(*domain.UserType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberGetCurrentUserType indicates an expected call of MemberGetCurrentUserType.
func (mr *MockIOrgInteractorMockRecorder) MemberGetCurrentUserType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberGetCurrentUserType", reflect.TypeOf((*MockIOrgInteractor)(nil).MemberGetCurrentUserType), arg0, arg1)
}

// MemberGetUserType mocks base method.
func (m *MockIOrgInteractor) MemberGetUserType(arg0 context.Context, arg1 domain.UserID, arg2 domain.OrgID) (*domain.UserType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberGetUserType", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.UserType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberGetUserType indicates an expected call of MemberGetUserType.
func (mr *MockIOrgInteractorMockRecorder) MemberGetUserType(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberGetUserType", reflect.TypeOf((*MockIOrgInteractor)(nil).MemberGetUserType), arg0, arg1, arg2)
}

// MemberList mocks base method.
func (m *MockIOrgInteractor) MemberList(arg0 context.Context, arg1 domain.OrgID) (map[domain.UserType][]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberList", arg0, arg1)
	ret0, _ := ret[0].(map[domain.UserType][]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberList indicates an expected call of MemberList.
func (mr *MockIOrgInteractorMockRecorder) MemberList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberList", reflect.TypeOf((*MockIOrgInteractor)(nil).MemberList), arg0, arg1)
}

// MemberUpdateUserType mocks base method.
func (m *MockIOrgInteractor) MemberUpdateUserType(arg0 context.Context, arg1 domain.OrgMemberUpdateInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberUpdateUserType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MemberUpdateUserType indicates an expected call of MemberUpdateUserType.
func (mr *MockIOrgInteractorMockRecorder) MemberUpdateUserType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberUpdateUserType", reflect.TypeOf((*MockIOrgInteractor)(nil).MemberUpdateUserType), arg0, arg1)
}

// MemberValidCount mocks base method.
func (m *MockIOrgInteractor) MemberValidCount(arg0 context.Context, arg1 domain.OrgID) (*int, *domain.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberValidCount", arg0, arg1)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(*domain.Subscription)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MemberValidCount indicates an expected call of MemberValidCount.
func (mr *MockIOrgInteractorMockRecorder) MemberValidCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberValidCount", reflect.TypeOf((*MockIOrgInteractor)(nil).MemberValidCount), arg0, arg1)
}

// OrgValidCount mocks base method.
func (m *MockIOrgInteractor) OrgValidCount(arg0 context.Context, arg1 domain.UserID) (*int, *domain.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrgValidCount", arg0, arg1)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(*domain.Subscription)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OrgValidCount indicates an expected call of OrgValidCount.
func (mr *MockIOrgInteractorMockRecorder) OrgValidCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrgValidCount", reflect.TypeOf((*MockIOrgInteractor)(nil).OrgValidCount), arg0, arg1)
}

// MockIProjectInteractor is a mock of IProjectInteractor interface.
type MockIProjectInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockIProjectInteractorMockRecorder
}

// MockIProjectInteractorMockRecorder is the mock recorder for MockIProjectInteractor.
type MockIProjectInteractorMockRecorder struct {
	mock *MockIProjectInteractor
}

// NewMockIProjectInteractor creates a new mock instance.
func NewMockIProjectInteractor(ctrl *gomock.Controller) *MockIProjectInteractor {
	mock := &MockIProjectInteractor{ctrl: ctrl}
	mock.recorder = &MockIProjectInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProjectInteractor) EXPECT() *MockIProjectInteractorMockRecorder {
	return m.recorder
}

// CountValidByOrgID mocks base method.
func (m *MockIProjectInteractor) CountValidByOrgID(arg0 context.Context, arg1 domain.OrgID) (*int, *domain.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountValidByOrgID", arg0, arg1)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(*domain.Subscription)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountValidByOrgID indicates an expected call of CountValidByOrgID.
func (mr *MockIProjectInteractorMockRecorder) CountValidByOrgID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountValidByOrgID", reflect.TypeOf((*MockIProjectInteractor)(nil).CountValidByOrgID), arg0, arg1)
}

// CountValidByOrgSlug mocks base method.
func (m *MockIProjectInteractor) CountValidByOrgSlug(arg0 context.Context, arg1 string) (*int, *domain.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountValidByOrgSlug", arg0, arg1)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(*domain.Subscription)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountValidByOrgSlug indicates an expected call of CountValidByOrgSlug.
func (mr *MockIProjectInteractorMockRecorder) CountValidByOrgSlug(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountValidByOrgSlug", reflect.TypeOf((*MockIProjectInteractor)(nil).CountValidByOrgSlug), arg0, arg1)
}

// CountValidByUser mocks base method.
func (m *MockIProjectInteractor) CountValidByUser(arg0 context.Context, arg1 domain.UserID) (*int, *domain.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountValidByUser", arg0, arg1)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(*domain.Subscription)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountValidByUser indicates an expected call of CountValidByUser.
func (mr *MockIProjectInteractorMockRecorder) CountValidByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountValidByUser", reflect.TypeOf((*MockIProjectInteractor)(nil).CountValidByUser), arg0, arg1)
}

// Create mocks base method.
func (m *MockIProjectInteractor) Create(arg0 context.Context, arg1 domain.ProjectInput) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIProjectInteractorMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIProjectInteractor)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIProjectInteractor) Delete(arg0 context.Context, arg1 domain.ProjectID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIProjectInteractorMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIProjectInteractor)(nil).Delete), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockIProjectInteractor) GetByID(arg0 context.Context, arg1 domain.ProjectID) (*domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIProjectInteractorMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIProjectInteractor)(nil).GetByID), arg0, arg1)
}

// GetBySlug mocks base method.
func (m *MockIProjectInteractor) GetBySlug(arg0 context.Context, arg1 string) (*domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySlug", arg0, arg1)
	ret0, _ := ret[0].(*domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySlug indicates an expected call of GetBySlug.
func (mr *MockIProjectInteractorMockRecorder) GetBySlug(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySlug", reflect.TypeOf((*MockIProjectInteractor)(nil).GetBySlug), arg0, arg1)
}

// GetBySlugAndOrgID mocks base method.
func (m *MockIProjectInteractor) GetBySlugAndOrgID(arg0 context.Context, arg1 string, arg2 domain.OrgID) (*domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySlugAndOrgID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySlugAndOrgID indicates an expected call of GetBySlugAndOrgID.
func (mr *MockIProjectInteractorMockRecorder) GetBySlugAndOrgID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySlugAndOrgID", reflect.TypeOf((*MockIProjectInteractor)(nil).GetBySlugAndOrgID), arg0, arg1, arg2)
}

// GetBySlugAndOrgSlug mocks base method.
func (m *MockIProjectInteractor) GetBySlugAndOrgSlug(arg0 context.Context, arg1, arg2 string) (*domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySlugAndOrgSlug", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySlugAndOrgSlug indicates an expected call of GetBySlugAndOrgSlug.
func (mr *MockIProjectInteractorMockRecorder) GetBySlugAndOrgSlug(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySlugAndOrgSlug", reflect.TypeOf((*MockIProjectInteractor)(nil).GetBySlugAndOrgSlug), arg0, arg1, arg2)
}

// ListAll mocks base method.
func (m *MockIProjectInteractor) ListAll(arg0 context.Context) ([]domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", arg0)
	ret0, _ := ret[0].([]domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockIProjectInteractorMockRecorder) ListAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockIProjectInteractor)(nil).ListAll), arg0)
}

// ListByOrg mocks base method.
func (m *MockIProjectInteractor) ListByOrg(arg0 context.Context, arg1 domain.OrgID) ([]domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByOrg", arg0, arg1)
	ret0, _ := ret[0].([]domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByOrg indicates an expected call of ListByOrg.
func (mr *MockIProjectInteractorMockRecorder) ListByOrg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByOrg", reflect.TypeOf((*MockIProjectInteractor)(nil).ListByOrg), arg0, arg1)
}

// ListByUser mocks base method.
func (m *MockIProjectInteractor) ListByUser(arg0 context.Context) ([]domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUser", arg0)
	ret0, _ := ret[0].([]domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUser indicates an expected call of ListByUser.
func (mr *MockIProjectInteractorMockRecorder) ListByUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUser", reflect.TypeOf((*MockIProjectInteractor)(nil).ListByUser), arg0)
}

// SlugListByUser mocks base method.
func (m *MockIProjectInteractor) SlugListByUser(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlugListByUser", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SlugListByUser indicates an expected call of SlugListByUser.
func (mr *MockIProjectInteractorMockRecorder) SlugListByUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlugListByUser", reflect.TypeOf((*MockIProjectInteractor)(nil).SlugListByUser), arg0)
}

// MockISmtpInteractor is a mock of ISmtpInteractor interface.
type MockISmtpInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockISmtpInteractorMockRecorder
}

// MockISmtpInteractorMockRecorder is the mock recorder for MockISmtpInteractor.
type MockISmtpInteractorMockRecorder struct {
	mock *MockISmtpInteractor
}

// NewMockISmtpInteractor creates a new mock instance.
func NewMockISmtpInteractor(ctrl *gomock.Controller) *MockISmtpInteractor {
	mock := &MockISmtpInteractor{ctrl: ctrl}
	mock.recorder = &MockISmtpInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISmtpInteractor) EXPECT() *MockISmtpInteractorMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockISmtpInteractor) Send(arg0 domain.SmtpInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockISmtpInteractorMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockISmtpInteractor)(nil).Send), arg0)
}

// MockIUserInteractor is a mock of IUserInteractor interface.
type MockIUserInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockIUserInteractorMockRecorder
}

// MockIUserInteractorMockRecorder is the mock recorder for MockIUserInteractor.
type MockIUserInteractorMockRecorder struct {
	mock *MockIUserInteractor
}

// NewMockIUserInteractor creates a new mock instance.
func NewMockIUserInteractor(ctrl *gomock.Controller) *MockIUserInteractor {
	mock := &MockIUserInteractor{ctrl: ctrl}
	mock.recorder = &MockIUserInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserInteractor) EXPECT() *MockIUserInteractorMockRecorder {
	return m.recorder
}

// GetByEmail mocks base method.
func (m *MockIUserInteractor) GetByEmail(arg0 context.Context, arg1 string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0, arg1)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockIUserInteractorMockRecorder) GetByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockIUserInteractor)(nil).GetByEmail), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockIUserInteractor) GetByID(arg0 context.Context, arg1 domain.UserID) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIUserInteractorMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIUserInteractor)(nil).GetByID), arg0, arg1)
}

// GetUserCli mocks base method.
func (m *MockIUserInteractor) GetUserCli(arg0 context.Context, arg1 *domain.UserCliValidationInput) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCli", arg0, arg1)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCli indicates an expected call of GetUserCli.
func (mr *MockIUserInteractorMockRecorder) GetUserCli(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCli", reflect.TypeOf((*MockIUserInteractor)(nil).GetUserCli), arg0, arg1)
}

// UpdateCliPassword mocks base method.
func (m *MockIUserInteractor) UpdateCliPassword(arg0 context.Context) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCliPassword", arg0)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCliPassword indicates an expected call of UpdateCliPassword.
func (mr *MockIUserInteractorMockRecorder) UpdateCliPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCliPassword", reflect.TypeOf((*MockIUserInteractor)(nil).UpdateCliPassword), arg0)
}

// UpdateValid mocks base method.
func (m *MockIUserInteractor) UpdateValid(arg0 context.Context, arg1 domain.UserUpdateIsValidInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateValid", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateValid indicates an expected call of UpdateValid.
func (mr *MockIUserInteractorMockRecorder) UpdateValid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValid", reflect.TypeOf((*MockIUserInteractor)(nil).UpdateValid), arg0, arg1)
}

// UpsertIfNotInvalid mocks base method.
func (m *MockIUserInteractor) UpsertIfNotInvalid(arg0 context.Context) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertIfNotInvalid", arg0)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertIfNotInvalid indicates an expected call of UpsertIfNotInvalid.
func (mr *MockIUserInteractorMockRecorder) UpsertIfNotInvalid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertIfNotInvalid", reflect.TypeOf((*MockIUserInteractor)(nil).UpsertIfNotInvalid), arg0)
}
